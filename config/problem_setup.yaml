# Setup problem/game parameters before running the dlp_node
debug: False
# unique agent ID, starts from 0
myID: 0

# [rows, columns]
#grid_size: [7,7]
grid_size: [10,10]

# sector size (x,y) in ENU, in meter(s)
# for hawrdware test
#sector_size: [0.85, 0.85]
# for simulation
#sector_size: [2.0, 2.0]
sector_size: [10.0, 10.0]

# origin shifts (dx,dy) from (0,0) in ENU, in meter(s)
# for hardware experiment
#origin_shifts: [3.0, 3.0]
# for simulation
#origin_shifts: [0.0, 0.0]
origin_shifts: [50.0, 50.0]

N_defenders: 3
N_attackers: 3

# defenders velocity [m/s]
d_velocity: [3.0, 3.0, 3.0]

# use local estimates of all defenders states
use_local_estimates: False

# count of base sectors
nBase: 1

# set of base sectors 
#Base: [11]
Base: [46]

# count of base reference sectors
#nBaseRef: 3
nBaseRef: 12

# set of base referense sectors
#BaseRef: [2,8,9]
#BaseRef: [3,4,5,10,12,17,18,19]
BaseRef: [34,35,36,37,44,47,54,57,64,65,66,67]

# Sector (and # of sectors) locations of static obstacles
# for the big world
Nobs_sectors: 10
obs_sectors: [45,46,55,56, 74, 53, 58,77, 33,28]
#Nobs_sectors: 0
#obs_sectors: []


# strategy weights
alpha: -0.99
beta: -0.01

# prediction horizon
Tp: 4

neighbor_radius: 1

# defenders global/local sensing of enemies
local_sensing: True

# local vs. global communication between defenders (centralized vs decomposed approach)
global_comms: False

# maximum ROS loop frequency
update_freq: 50

# home position
home: [1.0, 1.0]

# fixed altitude setpoint
altitude_setpoint: 3.0

# use joystick
enable_joystick: False

# whether to use GPS or directly local_position coordinates
# False for indoor hardware test
use_gps: True

# whether to used simulated position, set True if using gazebo
# False for hardware test
use_sim: True

# lat/long of zero position
#lat0: 47.397742
#long0: 8.5455933
lat0: 47.3972911
long0: 8.5449276

# fence for simulation
#fence_min_x: 0
#fence_max_x: 14.0
#fence_min_y: 0.0
#fence_max_y: 14.0
fence_min_x: -50.0
fence_max_x: 50.0
fence_min_y: -50.0
fence_max_y: 50.0

# for hardware test
#fence_min_x: -2.8
#fence_max_x: 2.8
#fence_min_y: -2.0
#fence_max_y: 2.2

# attacker capture distance, [meter]
# for hardware test
#capture_distance: 1.2
# for simulation
#capture_distance: 2.1
capture_distance: 10.1

# if true, use algorithm to compute attack plan
# otherwise, joystick is expected to be used
auto_attack: true
